amends "package://pkg.pkl-lang.org/pkl-project-commons/pkl.impl.circleci@1.1.1#/PklCI.pkl"

import "pkl:semver"

local testJobs = jobs.keys.filter((it) -> it.startsWith("test"))

prb {
  jobs {
    ...testJobs
  }
}

main = buildWorkflow

local class PklDistribution {
  /// The version of this distribution
  version: String

  /// The parsed semver.
  fixed _version: semver.Version = semver.parseOrNull(version)!!

  /// The URL to download this distribution
  fixed downloadUrl: String = "https://github.com/apple/pkl/releases/download/\(version)/pkl-linux-amd64"

  /// The URL to download this distribution
  fixed downloadUrlWindows: String =
    if (_version.minor < 26) throw("\(version) is not supported on Windows")
    else "https://github.com/apple/pkl/releases/download/\(version)/pkl-windows-amd64.exe"
}

local distributionLatest: PklDistribution = new { version = "0.26.0" }

local pklDistributions: Listing<PklDistribution> = new {
  new { version = "0.25.3" }
  distributionLatest
}

release = (buildWorkflow) {
  jobs {
    new {
      ["create-macos-universal-binary"] {
        requires = buildJobs.toListing()
      }
    }
    new {
      ["do-release"] {
        requires {
          "create-macos-universal-binary"
        }
        context {
          "pkl-github-release"
        }
      }
    }
  }
}

triggerDocsBuild = "release"

triggerPackageDocsBuild = "release"

jobs {
  for (distribution in pklDistributions) {
    ["test-pkl-\(distribution.version.replaceAll(".", "-"))"] = (goJob) {
      steps {
        new RunStep {
          name = "go test"
          command = """
            curl -L -o pkl.bin '\(distribution.downloadUrl)'
            chmod +x pkl.bin
            export PKL_EXEC=$(pwd)/pkl.bin
            go install github.com/jstemmer/go-junit-report/v2@latest
            echo "Running Pkl unit tests"
            $PKL_EXEC test --junit-reports test-results/ codegen/src/tests/*.pkl
            echo "Running Pkl snippet tests"
            ./scripts/test_snippets.sh
            echo "Running Go unit tests"
            go test -race -v ./... 2>&1 | go-junit-report -iocopy -set-exit-code -out test-results/go-test-results.xml
            """
        }
        new StoreTestResults {
          path = "test-results"
        }
      }
    }
  }
  ["test-windows"] {
    machine {
      image = "windows-server-2022-gui:current"
    }
    resource_class = "windows.medium"
    steps {
      "checkout"
      new RunStep { command = "systeminfo" }
      new RunStep {
        name = "go test"
        command = #"""
          echo "Installing Go"
          Invoke-WebRequest "https://go.dev/dl/go1.21.11.windows-386.msi" -OutFile go.exe
          $pkg = "$PWD\go.exe"
          Start-Process msiexec "/i $pkg /qn";

          echo "Installing Pkl"
          Invoke-WebRequest "\#(distributionLatest.downloadUrlWindows)" -OutFile pkl.exe
          $env:PKL_EXEC = "$PWD\pkl.exe"

          echo "Running Pkl unit tests"
          .\pkl test --junit-reports test-results\ --project-dir codegen\src\

          echo "Running Go unit tests"
          go test -race -v .\... 2>&1 | go-junit-report -iocopy -set-exit-code -out test-results\go-test-results.xml
          """#
      }
    }
  }
  ["build-pkl-gen-go"] = (goJob) {
    steps {
      for (os in List("macos", "linux")) {
        for (arch in List("amd64", "aarch64")) {
          new RunStep {
            name = "go build \(os) \(arch)"
            environment {
              ["GOOS"] = if (os == "linux") os else "darwin"
              ["GOARCH"] = if (arch == "amd64") arch else "arm64"
            }
            command = #"""
              # strip preceding "v"
              VERSION="${CIRCLE_TAG:1}"

              go build \
                -o out/pkl-gen-go/pkl-gen-go-\#(os)-\#(arch).bin \
                -ldflags="-X 'main.Version=$VERSION'" \
                cmd/pkl-gen-go/pkl-gen-go.go
              """#
          }
        }
      }
      new PersistToWorkspaceStep {
        root = "."
        paths {
          "out/"
        }
      }
    }
  }
  ["create-macos-universal-binary"] {
    macos {
      xcode = "15.2.0"
    }
    steps {
      new AttachWorkspaceStep { at = "." }
      new RunStep {
        name = "Creating universal binary"
        command = #"""
          lipo \
            -create \
            -output out/pkl-gen-go/pkl-gen-go-macos.bin \
            out/pkl-gen-go/pkl-gen-go-macos-aarch64.bin \
            out/pkl-gen-go/pkl-gen-go-macos-amd64.bin
          rm out/pkl-gen-go/pkl-gen-go-macos-aarch64.bin
          rm out/pkl-gen-go/pkl-gen-go-macos-amd64.bin
          """#
      }
      new PersistToWorkspaceStep {
        root = "."
        paths {
          "out/pkl-gen-go/"
        }
      }
    }
  }
  ["build-pkl-package"] {
    docker {
      new { image = "cimg/base:2024.01" }
    }
    steps {
      "checkout"
      new RunStep {
        name = "Creating Pkl package"
        command = """
          curl -L -o pkl.bin '\(pklDistributions[pklDistributions.length - 1].downloadUrl)'
          chmod +x pkl.bin
          ./pkl.bin project package codegen/src/ --output-path out/pkl-package/
          """
      }
      new PersistToWorkspaceStep {
        root = "."
        paths {
          "out/"
        }
      }
    }
  }
  ["do-release"] {
    docker {
      new { image = "maniator/gh:v2.40.1" }
    }
    steps {
      "checkout"
      new AttachWorkspaceStep { at = "." }
      new RunStep {
        name = "gh release"
        // language=bash
        command = #"""
          # strip preceding "v"
          VERSION="${CIRCLE_TAG:1}"
          EXPECTED_VERSION=$(cat VERSION.txt)

          if [ "${EXPECTED_VERSION}" != "${VERSION}" ]; then
            echo "Mismatching versions!"
            echo "VERSION.txt has ${EXPECTED_VERSION}"
            echo "Inferred version from Git tag is ${VERSION}"
            echo "Update VERSION.txt to match the tag, and re-tag."
            exit 1
          fi

          echo "Creating release for Pkl package"
          gh release create "pkl.golang@${VERSION}" \
            --title "pkl.golang@${VERSION}" \
            --target "${CIRCLE_SHA1}" \
            --notes "This holds the release assets for the pkl.golang Pkl package" \
            --repo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" \
            out/pkl-package/*

          echo "Creating release for Go library"
          gh release create "${CIRCLE_TAG}" \
            --title "${CIRCLE_TAG}" \
            --target "${CIRCLE_SHA1}" \
            --verify-tag \
            --notes "Release notes: https://pkl-lang.org/go/current/CHANGELOG.html#release-${VERSION}" \
            --repo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" \
            out/pkl-gen-go/pkl-gen-go-linux-amd64.bin \
            out/pkl-gen-go/pkl-gen-go-linux-aarch64.bin \
            out/pkl-gen-go/pkl-gen-go-macos.bin
          """#
      }
    }
  }
}

local goJob: Job = new {
  docker {
    new {
      image = "cimg/go:1.21"
    }
  }
  steps {
    "checkout"
  }
}

local buildJobs = jobs.keys.filter((it) -> it.startsWith("build-"))

local buildWorkflow: Workflow = new {
  jobs {
    ...testJobs
    for (jobName in buildJobs) {
      new {
        [jobName] {
          requires { ...testJobs }
        }
      }
    }
  }
}
