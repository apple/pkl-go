–– Pkl Error ––
Package name `github.com/apple/pkl-go/codegen/snippet-tests/output/import` is not valid because it clashes with keyword `import`.

xx | throw("""
     ^^^^^^^^^
at pkl.golang.go#isValidPackageName.<function#2> (file://<codegen_dir>/src/go.pkl)

xx | let (packageNameShort = it.substring(it.lastIndexOf("/") + 1, it.length))
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at pkl.golang.go#isValidPackageName.<function#1> (file://<codegen_dir>/src/go.pkl)

xx | @go.Package { name = "github.com/apple/pkl-go/codegen/snippet-tests/output/import" }
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at InvalidPackageName.name (file://<codegen_dir>/snippet-tests/input/InvalidPackageName.err.pkl)

xx | if (seen.contains(decl)) seen
         ^^^^^^^^^^^^^^^^^^^
at pkl.golang.internal.gatherer#gatherTypeDeclarations (file://<codegen_dir>/src/internal/gatherer.pkl)

xx | gatherTypeDeclarations(superclass, seen)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at pkl.golang.internal.gatherer#gatherSuperDeclarations.<function#2> (file://<codegen_dir>/src/internal/gatherer.pkl)

xx | let (superclass = clazz.superclass)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at pkl.golang.internal.gatherer#gatherSuperDeclarations.<function#1> (file://<codegen_dir>/src/internal/gatherer.pkl)

xx | let (declarations = gatherer.gatherTypeDeclarations(clazz, List()))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at pkl.golang.Generator#allMappings.<function#1> (file://<codegen_dir>/src/Generator.pkl)

xx | let (clazz = reflect.Module(moduleToGenerate).moduleClass)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
at pkl.golang.Generator#allMappings (file://<codegen_dir>/src/Generator.pkl)

xx | local packages = allMappings
                      ^^^^^^^^^^^
at pkl.golang.Generator#packages (file://<codegen_dir>/src/Generator.pkl)

xx | for (_, package in packages) {
                        ^^^^^^^^
at pkl.golang.Generator#output.files (file://<codegen_dir>/src/Generator.pkl)

x | output.files?.toMap()?.mapValues((_, it) -> it.text) ?? Map()
    ^^^^^^^^^^^^
at  (repl:text)
