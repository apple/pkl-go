//===----------------------------------------------------------------------===//
// Copyright Â© 2024-2025 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//

/// Representation of a type in Go.
@Unlisted
abstract module pkl.golang.internal.Type

import "Type.pkl"

/// The imports required by this type.
imports: List<String>

/// The go representation of this type.
///
/// [goPackage] is the full path of the package that this type appears in.
abstract function render(goPackage: String): String

class Pointer extends Type {
  elem: Type

  imports = elem.imports

  function render(goPackage: String) =
    "*\(elem.render(goPackage))"
}

class Map extends Type {
  key: Type

  elem: Type

  imports = key.imports + elem.imports

  function render(goPackage: String) =
    "map[\(key.render(goPackage))]\(elem.render(goPackage))"
}

class Slice extends Type {
  elem: Type

  imports = elem.imports

  function render(goPackage: String) = "[]\(elem.render(goPackage))"
}

class Declared extends Type {
  /// The full import path for this type.
  importPath: String?

  imports = (if (importPath != null) List(importPath) else List())
    + if (typeArguments != null) typeArguments.flatMap((t) -> t.imports) else List()

  /// The package the type is found in
  package: String?

  /// The name of the type
  typeName: String

  /// The type arguments, if any.
  typeArguments: List<Type>?

  function renderBase(goPackage: String) =
    if (package != null && goPackage != importPath) "\(package).\(typeName)"
    else typeName

  function renderTypeArguments(goPackage: String) =
    if (typeArguments == null) ""
    else "[" + typeArguments.map((t) -> t.render(goPackage)).join(", ") + "]"

  function render(goPackage: String) =
    renderBase(goPackage) + renderTypeArguments(goPackage)
}
